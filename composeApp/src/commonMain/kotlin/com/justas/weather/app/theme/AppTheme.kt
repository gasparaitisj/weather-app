package com.justas.weather.app.theme

import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable

private val lightScheme =
    lightColorScheme(
        primary = Colors.primaryLight,
        onPrimary = Colors.onPrimaryLight,
        primaryContainer = Colors.primaryContainerLight,
        onPrimaryContainer = Colors.onPrimaryContainerLight,
        secondary = Colors.secondaryLight,
        onSecondary = Colors.onSecondaryLight,
        secondaryContainer = Colors.secondaryContainerLight,
        onSecondaryContainer = Colors.onSecondaryContainerLight,
        tertiary = Colors.tertiaryLight,
        onTertiary = Colors.onTertiaryLight,
        tertiaryContainer = Colors.tertiaryContainerLight,
        onTertiaryContainer = Colors.onTertiaryContainerLight,
        error = Colors.errorLight,
        onError = Colors.onErrorLight,
        errorContainer = Colors.errorContainerLight,
        onErrorContainer = Colors.onErrorContainerLight,
        background = Colors.backgroundLight,
        onBackground = Colors.onBackgroundLight,
        surface = Colors.surfaceLight,
        onSurface = Colors.onSurfaceLight,
        surfaceVariant = Colors.surfaceVariantLight,
        onSurfaceVariant = Colors.onSurfaceVariantLight,
        outline = Colors.outlineLight,
        outlineVariant = Colors.outlineVariantLight,
        scrim = Colors.scrimLight,
        inverseSurface = Colors.inverseSurfaceLight,
        inverseOnSurface = Colors.inverseOnSurfaceLight,
        inversePrimary = Colors.inversePrimaryLight,
        surfaceDim = Colors.surfaceDimLight,
        surfaceBright = Colors.surfaceBrightLight,
        surfaceContainerLowest = Colors.surfaceContainerLowestLight,
        surfaceContainerLow = Colors.surfaceContainerLowLight,
        surfaceContainer = Colors.surfaceContainerLight,
        surfaceContainerHigh = Colors.surfaceContainerHighLight,
        surfaceContainerHighest = Colors.surfaceContainerHighestLight,
    )

private val darkScheme =
    darkColorScheme(
        primary = Colors.primaryDark,
        onPrimary = Colors.onPrimaryDark,
        primaryContainer = Colors.primaryContainerDark,
        onPrimaryContainer = Colors.onPrimaryContainerDark,
        secondary = Colors.secondaryDark,
        onSecondary = Colors.onSecondaryDark,
        secondaryContainer = Colors.secondaryContainerDark,
        onSecondaryContainer = Colors.onSecondaryContainerDark,
        tertiary = Colors.tertiaryDark,
        onTertiary = Colors.onTertiaryDark,
        tertiaryContainer = Colors.tertiaryContainerDark,
        onTertiaryContainer = Colors.onTertiaryContainerDark,
        error = Colors.errorDark,
        onError = Colors.onErrorDark,
        errorContainer = Colors.errorContainerDark,
        onErrorContainer = Colors.onErrorContainerDark,
        background = Colors.backgroundDark,
        onBackground = Colors.onBackgroundDark,
        surface = Colors.surfaceDark,
        onSurface = Colors.onSurfaceDark,
        surfaceVariant = Colors.surfaceVariantDark,
        onSurfaceVariant = Colors.onSurfaceVariantDark,
        outline = Colors.outlineDark,
        outlineVariant = Colors.outlineVariantDark,
        scrim = Colors.scrimDark,
        inverseSurface = Colors.inverseSurfaceDark,
        inverseOnSurface = Colors.inverseOnSurfaceDark,
        inversePrimary = Colors.inversePrimaryDark,
        surfaceDim = Colors.surfaceDimDark,
        surfaceBright = Colors.surfaceBrightDark,
        surfaceContainerLowest = Colors.surfaceContainerLowestDark,
        surfaceContainerLow = Colors.surfaceContainerLowDark,
        surfaceContainer = Colors.surfaceContainerDark,
        surfaceContainerHigh = Colors.surfaceContainerHighDark,
        surfaceContainerHighest = Colors.surfaceContainerHighestDark,
    )

private val mediumContrastLightColorScheme =
    lightColorScheme(
        primary = Colors.primaryLightMediumContrast,
        onPrimary = Colors.onPrimaryLightMediumContrast,
        primaryContainer = Colors.primaryContainerLightMediumContrast,
        onPrimaryContainer = Colors.onPrimaryContainerLightMediumContrast,
        secondary = Colors.secondaryLightMediumContrast,
        onSecondary = Colors.onSecondaryLightMediumContrast,
        secondaryContainer = Colors.secondaryContainerLightMediumContrast,
        onSecondaryContainer = Colors.onSecondaryContainerLightMediumContrast,
        tertiary = Colors.tertiaryLightMediumContrast,
        onTertiary = Colors.onTertiaryLightMediumContrast,
        tertiaryContainer = Colors.tertiaryContainerLightMediumContrast,
        onTertiaryContainer = Colors.onTertiaryContainerLightMediumContrast,
        error = Colors.errorLightMediumContrast,
        onError = Colors.onErrorLightMediumContrast,
        errorContainer = Colors.errorContainerLightMediumContrast,
        onErrorContainer = Colors.onErrorContainerLightMediumContrast,
        background = Colors.backgroundLightMediumContrast,
        onBackground = Colors.onBackgroundLightMediumContrast,
        surface = Colors.surfaceLightMediumContrast,
        onSurface = Colors.onSurfaceLightMediumContrast,
        surfaceVariant = Colors.surfaceVariantLightMediumContrast,
        onSurfaceVariant = Colors.onSurfaceVariantLightMediumContrast,
        outline = Colors.outlineLightMediumContrast,
        outlineVariant = Colors.outlineVariantLightMediumContrast,
        scrim = Colors.scrimLightMediumContrast,
        inverseSurface = Colors.inverseSurfaceLightMediumContrast,
        inverseOnSurface = Colors.inverseOnSurfaceLightMediumContrast,
        inversePrimary = Colors.inversePrimaryLightMediumContrast,
        surfaceDim = Colors.surfaceDimLightMediumContrast,
        surfaceBright = Colors.surfaceBrightLightMediumContrast,
        surfaceContainerLowest = Colors.surfaceContainerLowestLightMediumContrast,
        surfaceContainerLow = Colors.surfaceContainerLowLightMediumContrast,
        surfaceContainer = Colors.surfaceContainerLightMediumContrast,
        surfaceContainerHigh = Colors.surfaceContainerHighLightMediumContrast,
        surfaceContainerHighest = Colors.surfaceContainerHighestLightMediumContrast,
    )

private val highContrastLightColorScheme =
    lightColorScheme(
        primary = Colors.primaryLightHighContrast,
        onPrimary = Colors.onPrimaryLightHighContrast,
        primaryContainer = Colors.primaryContainerLightHighContrast,
        onPrimaryContainer = Colors.onPrimaryContainerLightHighContrast,
        secondary = Colors.secondaryLightHighContrast,
        onSecondary = Colors.onSecondaryLightHighContrast,
        secondaryContainer = Colors.secondaryContainerLightHighContrast,
        onSecondaryContainer = Colors.onSecondaryContainerLightHighContrast,
        tertiary = Colors.tertiaryLightHighContrast,
        onTertiary = Colors.onTertiaryLightHighContrast,
        tertiaryContainer = Colors.tertiaryContainerLightHighContrast,
        onTertiaryContainer = Colors.onTertiaryContainerLightHighContrast,
        error = Colors.errorLightHighContrast,
        onError = Colors.onErrorLightHighContrast,
        errorContainer = Colors.errorContainerLightHighContrast,
        onErrorContainer = Colors.onErrorContainerLightHighContrast,
        background = Colors.backgroundLightHighContrast,
        onBackground = Colors.onBackgroundLightHighContrast,
        surface = Colors.surfaceLightHighContrast,
        onSurface = Colors.onSurfaceLightHighContrast,
        surfaceVariant = Colors.surfaceVariantLightHighContrast,
        onSurfaceVariant = Colors.onSurfaceVariantLightHighContrast,
        outline = Colors.outlineLightHighContrast,
        outlineVariant = Colors.outlineVariantLightHighContrast,
        scrim = Colors.scrimLightHighContrast,
        inverseSurface = Colors.inverseSurfaceLightHighContrast,
        inverseOnSurface = Colors.inverseOnSurfaceLightHighContrast,
        inversePrimary = Colors.inversePrimaryLightHighContrast,
        surfaceDim = Colors.surfaceDimLightHighContrast,
        surfaceBright = Colors.surfaceBrightLightHighContrast,
        surfaceContainerLowest = Colors.surfaceContainerLowestLightHighContrast,
        surfaceContainerLow = Colors.surfaceContainerLowLightHighContrast,
        surfaceContainer = Colors.surfaceContainerLightHighContrast,
        surfaceContainerHigh = Colors.surfaceContainerHighLightHighContrast,
        surfaceContainerHighest = Colors.surfaceContainerHighestLightHighContrast,
    )

private val mediumContrastDarkColorScheme =
    darkColorScheme(
        primary = Colors.primaryDarkMediumContrast,
        onPrimary = Colors.onPrimaryDarkMediumContrast,
        primaryContainer = Colors.primaryContainerDarkMediumContrast,
        onPrimaryContainer = Colors.onPrimaryContainerDarkMediumContrast,
        secondary = Colors.secondaryDarkMediumContrast,
        onSecondary = Colors.onSecondaryDarkMediumContrast,
        secondaryContainer = Colors.secondaryContainerDarkMediumContrast,
        onSecondaryContainer = Colors.onSecondaryContainerDarkMediumContrast,
        tertiary = Colors.tertiaryDarkMediumContrast,
        onTertiary = Colors.onTertiaryDarkMediumContrast,
        tertiaryContainer = Colors.tertiaryContainerDarkMediumContrast,
        onTertiaryContainer = Colors.onTertiaryContainerDarkMediumContrast,
        error = Colors.errorDarkMediumContrast,
        onError = Colors.onErrorDarkMediumContrast,
        errorContainer = Colors.errorContainerDarkMediumContrast,
        onErrorContainer = Colors.onErrorContainerDarkMediumContrast,
        background = Colors.backgroundDarkMediumContrast,
        onBackground = Colors.onBackgroundDarkMediumContrast,
        surface = Colors.surfaceDarkMediumContrast,
        onSurface = Colors.onSurfaceDarkMediumContrast,
        surfaceVariant = Colors.surfaceVariantDarkMediumContrast,
        onSurfaceVariant = Colors.onSurfaceVariantDarkMediumContrast,
        outline = Colors.outlineDarkMediumContrast,
        outlineVariant = Colors.outlineVariantDarkMediumContrast,
        scrim = Colors.scrimDarkMediumContrast,
        inverseSurface = Colors.inverseSurfaceDarkMediumContrast,
        inverseOnSurface = Colors.inverseOnSurfaceDarkMediumContrast,
        inversePrimary = Colors.inversePrimaryDarkMediumContrast,
        surfaceDim = Colors.surfaceDimDarkMediumContrast,
        surfaceBright = Colors.surfaceBrightDarkMediumContrast,
        surfaceContainerLowest = Colors.surfaceContainerLowestDarkMediumContrast,
        surfaceContainerLow = Colors.surfaceContainerLowDarkMediumContrast,
        surfaceContainer = Colors.surfaceContainerDarkMediumContrast,
        surfaceContainerHigh = Colors.surfaceContainerHighDarkMediumContrast,
        surfaceContainerHighest = Colors.surfaceContainerHighestDarkMediumContrast,
    )

private val highContrastDarkColorScheme =
    darkColorScheme(
        primary = Colors.primaryDarkHighContrast,
        onPrimary = Colors.onPrimaryDarkHighContrast,
        primaryContainer = Colors.primaryContainerDarkHighContrast,
        onPrimaryContainer = Colors.onPrimaryContainerDarkHighContrast,
        secondary = Colors.secondaryDarkHighContrast,
        onSecondary = Colors.onSecondaryDarkHighContrast,
        secondaryContainer = Colors.secondaryContainerDarkHighContrast,
        onSecondaryContainer = Colors.onSecondaryContainerDarkHighContrast,
        tertiary = Colors.tertiaryDarkHighContrast,
        onTertiary = Colors.onTertiaryDarkHighContrast,
        tertiaryContainer = Colors.tertiaryContainerDarkHighContrast,
        onTertiaryContainer = Colors.onTertiaryContainerDarkHighContrast,
        error = Colors.errorDarkHighContrast,
        onError = Colors.onErrorDarkHighContrast,
        errorContainer = Colors.errorContainerDarkHighContrast,
        onErrorContainer = Colors.onErrorContainerDarkHighContrast,
        background = Colors.backgroundDarkHighContrast,
        onBackground = Colors.onBackgroundDarkHighContrast,
        surface = Colors.surfaceDarkHighContrast,
        onSurface = Colors.onSurfaceDarkHighContrast,
        surfaceVariant = Colors.surfaceVariantDarkHighContrast,
        onSurfaceVariant = Colors.onSurfaceVariantDarkHighContrast,
        outline = Colors.outlineDarkHighContrast,
        outlineVariant = Colors.outlineVariantDarkHighContrast,
        scrim = Colors.scrimDarkHighContrast,
        inverseSurface = Colors.inverseSurfaceDarkHighContrast,
        inverseOnSurface = Colors.inverseOnSurfaceDarkHighContrast,
        inversePrimary = Colors.inversePrimaryDarkHighContrast,
        surfaceDim = Colors.surfaceDimDarkHighContrast,
        surfaceBright = Colors.surfaceBrightDarkHighContrast,
        surfaceContainerLowest = Colors.surfaceContainerLowestDarkHighContrast,
        surfaceContainerLow = Colors.surfaceContainerLowDarkHighContrast,
        surfaceContainer = Colors.surfaceContainerDarkHighContrast,
        surfaceContainerHigh = Colors.surfaceContainerHighDarkHighContrast,
        surfaceContainerHighest = Colors.surfaceContainerHighestDarkHighContrast,
    )

@Composable
fun AppTheme(content: @Composable () -> Unit) {
    MaterialTheme(
        colorScheme = if (isSystemInDarkTheme()) darkScheme else lightScheme,
        content = {
            Surface(content = content)
        },
    )
}
